// In src/Repository/AuthorRepository.php

/**
 * Returns authors with book statistics, supporting filtering and pagination
 */
public function getAuthorsWithBookStats(
    int $page = 1,
    int $limit = 20,
    ?string $nameFilter = null,
    string $sortBy = 'id',
    string $sortOrder = 'ASC'
): array {
    $qb = $this->createQueryBuilder('a')
        ->select('a, b')
        ->leftJoin('a.books', 'b')
        ->orderBy('a.' . $sortBy, $sortOrder);

    if ($nameFilter !== null) {
        $qb->where('a.name LIKE :nameFilter')
            ->setParameter('nameFilter', '%' . $nameFilter . '%');
    }

    $query = $qb->getQuery()
        ->setFirstResult(($page - 1) * $limit)
        ->setMaxResults($limit);

    $results = $query->getResult();

    $authors = [];
    foreach ($results as $author) {
        $authorId = $author->getId();
        
        if (!isset($authors[$authorId])) {
            $books = $author->getBooks();
            $bookNames = [];
            
            foreach ($books as $book) {
                $bookNames[] = $book->getName();
            }
            
            $authors[$authorId] = [
                'id' => $author->getId(),
                'name' => $author->getName(),
                'books_count' => count($books),
                'book_names' => implode(', ', $bookNames)
            ];
        }
    }

    return array_values($authors);
}

/**
 * Get total count of authors (for pagination metadata)
 */
public function countAuthors(?string $nameFilter = null): int
{
    $qb = $this->createQueryBuilder('a')
        ->select('COUNT(a.id)');

    if ($nameFilter !== null) {
        $qb->where('a.name LIKE :nameFilter')
            ->setParameter('nameFilter', '%' . $nameFilter . '%');
    }

    return (int)$qb->getQuery()->getSingleScalarResult();
}
